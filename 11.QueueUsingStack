// QueueUsingStack.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include"iostream"
using namespace std;

class Stack
{
private:
	int pos;
	int a[20];
public:
	Stack()
	{
        a[20]==0;
	pos=-1;
	}
	int empty()
	{
		if(pos==-1)
			return 1;
		else
			return 0;
	}
	void push(int value)
	{
		if(pos==20)
			cout<<"/nStack overflow./n";
		else
		{
			++pos;
			a[pos]=value;
		}
	}
	int pop()
	{
		if(pos==-1)
		{
			cout<<"\nStack underflow.\n";
			return 0;
		}
		else
		{
			return a[pos--];
		}
	}
	int top()
	{
		return a[pos];
	}
};

class Queue
{
private:
	Stack ins,del;
public:
	Queue()
	{
		
	}
	void insert(int d)
	{
		
		if(ins.empty() && del.empty())
		{
			ins.push(d);
			return;
		}
		if(ins.empty())
		{
			while(del.empty()==0)
			{	ins.push(del.pop());
			}
			ins.push(d);
		}
		else
		{	
			ins.push(d);
		}

	}
	void Delete()
	{
		if(ins.empty() && del.empty())
		{
			cout<<"\n--empty--\n";
			return;
		}
		
		if(del.empty())
		{
			while(ins.empty()==0)
			{
				del.push(ins.pop());
			}
			cout<<"\n deleted element is "<<del.pop();
		}
		else
		{
			cout<<"\n deleted element is "<<del.pop();
		}
	}
};
int main()
{
	int ch,v;
	Queue obj;
	do
	{
		cout<<"\n1. Insert element in queue.\n";
		cout<<"\n2. Delete element from queue.\n";
		cin>>ch;
		switch(ch)
		{
			case 1:
				{
					cout<<"\nEnter value for insertion=";
					cin>>v;
					obj.insert(v);
					break;
				}
			case 2:
				{
					obj.Delete();
					break;
				}
		}
	}while(ch==1||ch==2);
	system("pause");
	return 0;
}
